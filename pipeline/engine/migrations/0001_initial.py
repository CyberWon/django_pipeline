# Generated by Django 2.2.4 on 2019-08-23 06:56

from django.db import migrations, models
import django.db.models.deletion
import pipeline.engine.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Data',
            fields=[
                ('id', models.CharField(max_length=32, primary_key=True, serialize=False, unique=True, verbose_name='节点 ID')),
                ('inputs', pipeline.engine.models.fields.IOField(verbose_name='输入数据')),
                ('outputs', pipeline.engine.models.fields.IOField(verbose_name='输出数据')),
                ('ex_data', pipeline.engine.models.fields.IOField(verbose_name='异常数据')),
            ],
        ),
        migrations.CreateModel(
            name='DataSnapshot',
            fields=[
                ('key', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='对象唯一键')),
                ('obj', pipeline.engine.models.fields.IOField(verbose_name='对象存储字段')),
            ],
        ),
        migrations.CreateModel(
            name='FunctionSwitch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='功能名称')),
                ('description', models.TextField(default='', verbose_name='功能描述')),
                ('is_active', models.BooleanField(default=False, verbose_name='是否激活')),
            ],
        ),
        migrations.CreateModel(
            name='HistoryData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inputs', pipeline.engine.models.fields.IOField(verbose_name='输入数据')),
                ('outputs', pipeline.engine.models.fields.IOField(verbose_name='输出数据')),
                ('ex_data', pipeline.engine.models.fields.IOField(verbose_name='异常数据')),
            ],
        ),
        migrations.CreateModel(
            name='LoopActivityScheduleHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule_id', models.CharField(max_length=64, verbose_name='ID 节点ID+version')),
                ('activity_id', models.CharField(db_index=True, max_length=32, verbose_name='节点 ID')),
                ('schedule_times', models.IntegerField(default=0, verbose_name='被调度次数')),
                ('wait_callback', models.BooleanField(default=False, verbose_name='是否是回调型调度')),
                ('callback_data', pipeline.engine.models.fields.IOField(default=None, verbose_name='回调数据')),
                ('version', models.CharField(db_index=True, max_length=32, verbose_name='Activity 的版本')),
                ('current_loop', models.PositiveIntegerField(verbose_name='当前调度所处的循环计数')),
            ],
        ),
        migrations.CreateModel(
            name='LoopActivityStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(db_index=True, max_length=32, verbose_name='节点 id')),
                ('current_loop', models.PositiveIntegerField(verbose_name='本次循环次数')),
                ('actual_loop', models.PositiveIntegerField(verbose_name='实际循环次数')),
                ('loop_times', models.PositiveIntegerField(verbose_name='所需循环次数')),
            ],
        ),
        migrations.CreateModel(
            name='NodeCeleryTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_id', models.CharField(db_index=True, max_length=32, unique=True, verbose_name='节点 ID')),
                ('celery_task_id', models.CharField(default='', max_length=40, verbose_name='celery 任务 ID')),
            ],
        ),
        migrations.CreateModel(
            name='NodeRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ancestor_id', models.CharField(db_index=True, max_length=32, verbose_name='祖先 ID')),
                ('descendant_id', models.CharField(db_index=True, max_length=32, verbose_name='后代 ID')),
                ('distance', models.IntegerField(verbose_name='距离')),
            ],
        ),
        migrations.CreateModel(
            name='ProcessCeleryTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('process_id', models.CharField(db_index=True, max_length=32, unique=True, verbose_name='pipeline 进程 ID')),
                ('celery_task_id', models.CharField(default='', max_length=40, verbose_name='celery 任务 ID')),
            ],
        ),
        migrations.CreateModel(
            name='ProcessSnapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', pipeline.engine.models.fields.IOField(verbose_name='pipeline 运行时数据')),
            ],
        ),
        migrations.CreateModel(
            name='ScheduleCeleryTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule_id', models.CharField(db_index=True, max_length=64, unique=True, verbose_name='schedule ID')),
                ('celery_task_id', models.CharField(default='', max_length=40, verbose_name='celery 任务 ID')),
            ],
        ),
        migrations.CreateModel(
            name='ScheduleService',
            fields=[
                ('id', models.CharField(max_length=64, primary_key=True, serialize=False, unique=True, verbose_name='ID 节点ID+version')),
                ('activity_id', models.CharField(db_index=True, max_length=32, verbose_name='节点 ID')),
                ('process_id', models.CharField(max_length=32, verbose_name='Pipeline 进程 ID')),
                ('schedule_times', models.IntegerField(default=0, verbose_name='被调度次数')),
                ('wait_callback', models.BooleanField(default=False, verbose_name='是否是回调型调度')),
                ('callback_data', pipeline.engine.models.fields.IOField(default=None, verbose_name='回调数据')),
                ('service_act', pipeline.engine.models.fields.IOField(verbose_name='待调度服务')),
                ('is_finished', models.BooleanField(default=False, verbose_name='是否已完成')),
                ('version', models.CharField(db_index=True, max_length=32, verbose_name='Activity 的版本')),
                ('is_scheduling', models.BooleanField(default=False, verbose_name='是否正在被调度')),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.CharField(max_length=32, primary_key=True, serialize=False, unique=True, verbose_name='节点 ID')),
                ('state', models.CharField(max_length=10, verbose_name='状态')),
                ('name', models.CharField(default='', max_length=64, verbose_name='节点名称')),
                ('retry', models.IntegerField(default=0, verbose_name='重试次数')),
                ('loop', models.IntegerField(default=1, verbose_name='循环次数')),
                ('skip', models.BooleanField(default=False, verbose_name='是否跳过')),
                ('error_ignorable', models.BooleanField(default=False, verbose_name='是否出错后自动忽略')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('started_time', models.DateTimeField(null=True, verbose_name='开始时间')),
                ('archived_time', models.DateTimeField(null=True, verbose_name='归档时间')),
                ('version', models.CharField(max_length=32, verbose_name='版本')),
            ],
            options={
                'ordering': ['-created_time'],
            },
        ),
        migrations.CreateModel(
            name='SubProcessRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subprocess_id', models.CharField(db_index=True, max_length=32, verbose_name='子流程 ID')),
                ('process_id', models.CharField(max_length=32, verbose_name='对应的进程 ID')),
            ],
        ),
        migrations.CreateModel(
            name='PipelineProcess',
            fields=[
                ('id', models.CharField(max_length=32, primary_key=True, serialize=False, unique=True, verbose_name='Process ID')),
                ('root_pipeline_id', models.CharField(max_length=32, verbose_name='根 pipeline 的 ID')),
                ('current_node_id', models.CharField(db_index=True, default='', max_length=32, verbose_name='当前推进到的节点的 ID')),
                ('destination_id', models.CharField(default='', max_length=32, verbose_name='遇到该 ID 的节点就停止推进')),
                ('parent_id', models.CharField(default='', max_length=32, verbose_name='父 process 的 ID')),
                ('ack_num', models.IntegerField(default=0, verbose_name='收到子节点 ACK 的数量')),
                ('need_ack', models.IntegerField(default=-1, verbose_name='需要收到的子节点 ACK 的数量')),
                ('is_alive', models.BooleanField(default=True, verbose_name='该 process 是否还有效')),
                ('is_sleep', models.BooleanField(default=False, verbose_name='该 process 是否正在休眠')),
                ('is_frozen', models.BooleanField(default=False, verbose_name='该 process 是否被冻结')),
                ('snapshot', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.ProcessSnapshot')),
            ],
        ),
        migrations.CreateModel(
            name='PipelineModel',
            fields=[
                ('id', models.CharField(max_length=32, primary_key=True, serialize=False, unique=True, verbose_name='pipeline ID')),
                ('process', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.PipelineProcess')),
            ],
        ),
        migrations.CreateModel(
            name='LoopActivityHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(db_index=True, max_length=32, verbose_name='节点 id')),
                ('loop', models.PositiveIntegerField(verbose_name='本次循环计数')),
                ('started_time', models.DateTimeField(verbose_name='开始时间')),
                ('archived_time', models.DateTimeField(verbose_name='结束时间')),
                ('state', models.CharField(max_length=10, verbose_name='执行状态')),
                ('data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='engine.HistoryData')),
                ('schedule', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.LoopActivityScheduleHistory')),
            ],
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(db_index=True, max_length=32, verbose_name='节点 id')),
                ('started_time', models.DateTimeField(verbose_name='开始时间')),
                ('archived_time', models.DateTimeField(verbose_name='结束时间')),
                ('loop', models.IntegerField(default=1, verbose_name='循环次数')),
                ('skip', models.BooleanField(default=False, verbose_name='是否跳过')),
                ('data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='engine.HistoryData')),
            ],
        ),
    ]
